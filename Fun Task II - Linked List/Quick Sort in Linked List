vector<Node*> segregate(Node* head, int pivotIdx){
  vector<Node*> n;
  Node* small = new Node(-1);
  Node* large = new Node(-1);
  Node* curr = head;
  Node* sp = small; // small previous
  Node* lp = large; // large previous
  Node* pivotNode = head;
  
  while(pivotIdx--) pivotNode = pivotNode->next;
  
  while(curr){
    if(curr != pivotNode){
      if(curr->val <= pivotNode->val){
        sp->next = curr;
        sp = sp->next;
      }
      else{
        lp->next = curr;
        lp = lp->next;
      }
    }
    curr = curr->next;
  }
  
  sp->next = NULL;
  lp->next = NULL;
  pivotNode->next = NULL;
  
  n.push_back(small->next);
  n.push_back(pivotNode);
  n.push_back(large->next);
  
  return n;
}

int length(Node* head){
  if(!head) return 0;
  int len = 0;
  while(head){
    len++;
    head = head->next;
  }
  return len;
}

vector<Node*> mergeSortedLists(vector<Node*> leftSortedList, Node* pivotNode, vector<Node*> rightSortedList){
  Node* head = NULL;
  Node* tail = NULL;
  
  if(leftSortedList[0] && rightSortedList[0]){
    leftSortedList[1]->next = pivotNode;
    pivotNode->next = rightSortedList[0];
    head = leftSortedList[0];
    tail = rightSortedList[1];
  }
  else if(leftSortedList[0]){
    head = leftSortedList[0];
    leftSortedList[1]->next = pivotNode;
    tail = pivotNode;
  }
  else if(rightSortedList[0]){
    head = pivotNode;
    pivotNode->next = rightSortedList[0];
    tail = rightSortedList[1];
  }
  else{
    head = tail = pivotNode;
  }
  
  vector<Node*> n;
  n.push_back(head);
  n.push_back(tail);
  return n;
}

vector<Node*> quickSortHelper(Node* head){
  vector<Node*> v;
  if(!head || !head->next){
    v.push_back(head);
    v.push_back(head);
  }
  
  int len = length(head);
  int pivotIdx = len/2;
  vector<Node*> segregatedList = segregate(head, pivotIdx);
  
  vector<Node*> leftSortedList = quickSortHelper(segregatedList[0]);
  vector<Node*> rightSortedList = quickSortHelper(segregatedList[2]);
  
  return mergeSortedLists(leftSortedList, segregatedList[1], rightSortedLists);
}

Node* quickSort(Node* head){
  return quickSortHelper(head)[0];
}
