Node* midLL(Node* head){
  if(!head || !head->next) return head;
  Node* slow = head;
  Node* fast = head;
  while(fast->next && fast->next->next){
    slow = slow->next;
    fast = fast->next->next;
  }
  return slow;
}

Node* reverse(Node* head){
  if(!head || !head->next) return head;
  Node* prev = NULL;
  Node* curr = head;
  Node* nxt = NULL;
  while(curr){
    nxt = curr->next;
    curr->next = prev;
    prev = curr;
    curr = nxt;
  }
  return prev;
}

bool isPalindrome(Node* head){
  Node* m = midLL(head);
  Node* l1 = head;
  Node* l2 = m->next;
  m->next = NULL;
  l2 = reverse(l2);
  while(l1 && l2){
    if(l1->val != l2->val) return false;
    l1 = l1->next;
    l2 = l2->next;
  }
  return true;
}
  
